# syntax=docker/dockerfile:1

# Pin base image to digest for supply chain security
# To get latest digest: docker pull node:22-alpine && docker inspect node:22-alpine | grep -A1 RepoDigests
FROM node:22-alpine@sha256:6e8f6cfb16fe51ab0c4e2c6e5ec1f7a2f5e13ebaa2f76b6603d81d8e24cf2e89

# Add metadata labels
LABEL maintainer="your-email@example.com"
LABEL version="0.1.0"
LABEL description="LinkedIn MCP Server"
LABEL org.opencontainers.image.source="https://github.com/felipfr/linkedin-mcpserver"

# Set working directory in container
WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Install all dependencies (including dev dependencies needed for build)
RUN npm ci

# Copy source code and configuration files
COPY . .

# Run dotenvx prebuild and build the application
RUN npm run build

# Remove development dependencies to reduce image size
RUN npm prune --production && npm cache clean --force

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Change ownership of the app directory to non-root user
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Health check - verify Node.js process can start
# For better health checks, implement an actual health endpoint in your app
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "process.exit(0)" || exit 1

# Set up environment variables for production
ENV NODE_ENV=production

# Default command to run the application
CMD ["npx", "dotenvx", "run", "--", "node", "build/index.js"]
